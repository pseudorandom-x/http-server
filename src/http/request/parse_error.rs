use std::convert::From;
use std::error::Error;
use std::str::Utf8Error;
use std::fmt::{ Debug, Display, Formatter, Result as FmtResult };
use std::string::FromUtf8Error;

pub enum ParseError {
    InvalidMethod,
    InvalidRequest,
    InvalidEncoding,
    InvalidProtocol,
}

impl ParseError {
    pub fn message(&self) -> &str {
        match self {
            Self::InvalidMethod => "Invalid HTTP method!",
            Self::InvalidRequest => "Invalid HTTP request!",
            Self::InvalidEncoding => "Invalid encoding scheme!",
            Self::InvalidProtocol => "Invalid protocol!",
        }
    }
}

// needed for Error trait
impl Display for ParseError {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        write!(f, "{}", self.message())
    }
}

// needed for Error trait
impl Debug for ParseError {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        write!(f, "{}", self.message())
    }
}

/*
when converting utf8 slice ref to str in Request::try_from(), there may be a conversion error generated by str::from_utf8().
since Request::try_from() returns a ParseError, we must convert the Utf8Error returned by str::from_utf8()
into a ParseError (in this case, the error is always ParseError::InvalidEncoding)
*/
impl From<Utf8Error> for ParseError {
    fn from(_: Utf8Error) -> Self {
        Self::InvalidEncoding
    }
}